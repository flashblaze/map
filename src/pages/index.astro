---
import { eq } from "drizzle-orm";
import Map from "../components/Map.tsx";
import { db } from "../db";
import { locationTable } from "../db/schema";

const latitude = Astro.request.headers.get("cf-iplatitude") ?? "";
const longitude = Astro.request.headers.get("cf-iplongitude") ?? "";
const city = Astro.request.headers.get("cf-ipcity") ?? "";
const region = Astro.request.headers.get("cf-region") ?? "";
const regionCode = Astro.request.headers.get("cf-region-code") ?? "";
const country = Astro.request.headers.get("cf-ipcountry") ?? "";
const ip = Astro.request.headers.get("cf-connecting-ip") ?? "";
const hash = `${latitude}-${longitude}-${city}-${region}-${regionCode}-${country}-${ip}`;

const existingLocation = await db
  .select()
  .from(locationTable)
  .where(eq(locationTable.hash, hash));

const now = new Date();
const rateLimitWindow = 5 * 60 * 1000;

if (existingLocation.length === 0) {
  await db.insert(locationTable).values({
    latitude: parseFloat(latitude),
    longitude: parseFloat(longitude),
    city,
    region,
    regionCode,
    country,
    hash,
    count: 1,
    lastVisit: now,
  });
} else {
  const lastVisit = existingLocation[0]?.lastVisit
    ? new Date(existingLocation[0].lastVisit)
    : now;
  const timeSinceLastVisit = now.getTime() - lastVisit.getTime();

  if (timeSinceLastVisit >= rateLimitWindow) {
    await db
      .update(locationTable)
      .set({
        count: existingLocation[0].count + 1,
        lastVisit: now,
      })
      .where(eq(locationTable.hash, hash));
  }
}

const locations = await db.select().from(locationTable);

const data = locations.map((location) => [
  location.longitude,
  location.latitude,
  location.count,
]) as [number, number, number][];
---

<Map client:only="preact" data={data} />
